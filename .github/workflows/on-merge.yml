name: on-merge

on:
  push:
    branches:
      - main

jobs:
  find-projects:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      matrix-include: ${{ steps.matrix-include.outputs.value }}
    steps:
      - name: Check out the PR
        uses: actions/checkout@v4

      - name: Find projects
        id: find-projects
        uses: ./.github/actions/find-projects
        with:
          ref: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find bake targets and platforms
        id: find-targets-and-platforms
        env:
          PROJECTS: ${{ steps.find-projects.outputs.projects-text }}
        shell: /usr/bin/bash -euxo pipefail {0}
        run: |
          echo 'value<<EOF' >> $GITHUB_OUTPUT
          if [[ -n "${PROJECTS}" ]]; then
            while read -r LINE; do
              pushd "${LINE}"
              json="$(docker buildx bake --print | \
                jq --arg project "${LINE}" '.target | to_entries | map({project: $project, target: .key, platform: .value.platforms[]})')"
              echo "${json}"
              echo "${json}" >> $GITHUB_OUTPUT
              popd
            done < <(printenv PROJECTS)
          else
            json='[]'
            echo "${json}"
            echo "${json}" >> $GITHUB_OUTPUT
          fi
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Concatnate all matrix
        id: matrix-include
        env:
          JSONS: ${{ steps.find-targets-and-platforms.outputs.value }}
        shell: /usr/bin/bash -euo pipefail {0}
        run: |
          json="$(echo "${JSONS}" | jq -s '. | flatten')"
          echo 'value<<EOF' >> $GITHUB_OUTPUT
          echo "${json}"
          echo "${json}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  bake:
    permissions:
      contents: read
      packages: write
    needs: [find-projects]
    # Handle empty needs to resolve ` Matrix vector 'project' does not contain any values` error
    if: ${{ needs.find-projects.outputs.matrix-include != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find-projects.outputs.matrix-include) }}
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - name: Check out the PR
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            typst-target
            typstyle-target
            cargo-registry
          key: ${{ matrix.platform }}-${{ matrix.project }}-${{ matrix.target }}-${{ hashFiles(format('{0}/{1}', matrix.project, 'Dockerfile')) }}

      - name: Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "typst-target": "/typst/target/",
              "typstyle-target": "/typstyle/target/",
              "cargo-registry": "/usr/local/cargo/registry/"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bake
        uses: docker/bake-action@v6
        with:
          workdir: ${{ matrix.project }}
          targets: ${{ matrix.target }}
          source: .
          push: true
          set: |
            *.platform=${{ matrix.platform }}

  # A job that summarizes the results of `plan` jobs for required status checks.
  all-bake:
    permissions: {}
    runs-on: ubuntu-latest
    needs: [find-projects, bake]
    if: ${{ success() || (needs.find-projects.result == 'success' && needs.find-projects.outputs.matrix-include == '[]') }}
    steps:
      - name: Null Step
        run: |
          echo '${{ toJson(needs) }}'
